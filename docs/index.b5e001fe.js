class e extends HTMLElement{constructor(){super();let{source:e,timeout:t}=this.dataset;try{this.feedUrl=new URL(e)}catch(e){console.error(e),console.error("A fed-embed element did not have a valid source URL and has self-destructed."),this.remove();return}this.timeout=Number(t)||600;let r=new CSSStyleSheet;r.replaceSync(":where(fed-embed){display:block;}:where(fed-embed ul){list-style-type:none;margin:0;padding:0;}:where(fed-embed li){padding:0.5rem 1.5rem;border-bottom:1px solid#ccc;}"),document.adoptedStyleSheets=[r]}async connectedCallback(){let e=await this.getFeed(),t=document.createElement("ul");e.querySelectorAll("item").forEach(e=>{let r=e.querySelector("description").textContent;t.insertAdjacentHTML("beforeend",`<li>${r}</li>`)}),this.append(t)}async getFeed(){let{feedUrl:e}=this,t=!1;try{t=localStorage.getItem(e.toString())||!1}catch(e){}if(t){let{expires:r,feedString:s}=JSON.parse(t);if(!(r<Date.now()))return this.parseXML(s);{localStorage.removeItem(e.toString());let t=await this.fetchRss();return this.parseXML(t)}}let r=await this.fetchRss();return this.parseXML(r)}async fetchRss(){let{feedUrl:e,timeout:t}=this,r=await fetch(e),s=await r.text(),a={expires:Date.now()+1e3*t,feedString:s};try{localStorage.setItem(e.toString(),JSON.stringify(a))}catch(e){}return s}parseXML(e){let t=new DOMParser,r=t.parseFromString(e,"text/xml");return r}}window.customElements.define("fed-embed",e);